// Teste espec√≠fico para produ√ß√£o no Vercel
const { createClient } = require('@supabase/supabase-js')

console.log('üåê Teste Espec√≠fico para Produ√ß√£o Vercel')
console.log('=' .repeat(50))

// Configura√ß√£o exata do Vercel
const supabaseUrl = 'https://qdzrldxubcofobqmynab.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFkenJsZHh1YmNvZm9icW15bmFiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc3MzkyMjcsImV4cCI6MjA3MzMxNTIyN30.OGrgDawwnY9BXjwYpT36r1ESBHLHE2gf6FWZIYBsm3w'

console.log('üìã Configura√ß√£o:')
console.log('URL:', supabaseUrl)
console.log('Key:', supabaseKey ? 'Definida' : 'N√£o definida')

// Testar diferentes configura√ß√µes de cliente
async function testDifferentConfigs() {
  console.log('\nüîç Testando Diferentes Configura√ß√µes...')
  
  // Configura√ß√£o 1: Padr√£o
  console.log('\n1Ô∏è‚É£ Configura√ß√£o Padr√£o...')
  const supabase1 = createClient(supabaseUrl, supabaseKey)
  
  try {
    const { data, error } = await supabase1.auth.signInWithPassword({
      email: 'roberio.gomes@atento.com',
      password: 'admin123'
    })
    
    if (error) {
      console.error('‚ùå Erro:', error.message)
      console.error('üìã C√≥digo:', error.status)
    } else {
      console.log('‚úÖ Login OK')
      await supabase1.auth.signOut()
    }
  } catch (err) {
    console.error('‚ùå Erro geral:', err.message)
  }
  
  // Configura√ß√£o 2: Com headers espec√≠ficos
  console.log('\n2Ô∏è‚É£ Configura√ß√£o com Headers...')
  const supabase2 = createClient(supabaseUrl, supabaseKey, {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
      flowType: 'pkce'
    },
    global: {
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`,
        'Content-Type': 'application/json'
      }
    }
  })
  
  try {
    const { data, error } = await supabase2.auth.signInWithPassword({
      email: 'roberio.gomes@atento.com',
      password: 'admin123'
    })
    
    if (error) {
      console.error('‚ùå Erro:', error.message)
      console.error('üìã C√≥digo:', error.status)
    } else {
      console.log('‚úÖ Login OK')
      await supabase2.auth.signOut()
    }
  } catch (err) {
    console.error('‚ùå Erro geral:', err.message)
  }
  
  // Configura√ß√£o 3: M√≠nima
  console.log('\n3Ô∏è‚É£ Configura√ß√£o M√≠nima...')
  const supabase3 = createClient(supabaseUrl, supabaseKey, {
    auth: {
      persistSession: false
    }
  })
  
  try {
    const { data, error } = await supabase3.auth.signInWithPassword({
      email: 'roberio.gomes@atento.com',
      password: 'admin123'
    })
    
    if (error) {
      console.error('‚ùå Erro:', error.message)
      console.error('üìã C√≥digo:', error.status)
    } else {
      console.log('‚úÖ Login OK')
      await supabase3.auth.signOut()
    }
  } catch (err) {
    console.error('‚ùå Erro geral:', err.message)
  }
  
  // Teste direto da API
  console.log('\n4Ô∏è‚É£ Teste Direto da API...')
  try {
    const response = await fetch(`${supabaseUrl}/auth/v1/token?grant_type=password`, {
      method: 'POST',
      headers: {
        'apikey': supabaseKey,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'roberio.gomes@atento.com',
        password: 'admin123'
      })
    })
    
    console.log('üìã Status:', response.status)
    console.log('üìã OK:', response.ok)
    
    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå Erro da API:', errorText)
    } else {
      const data = await response.json()
      console.log('‚úÖ API OK:', data.access_token ? 'Token recebido' : 'Sem token')
    }
  } catch (err) {
    console.error('‚ùå Erro na API:', err.message)
  }
}

testDifferentConfigs()
