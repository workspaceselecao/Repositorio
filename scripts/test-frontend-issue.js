// Simular exatamente o que acontece no frontend
const { createClient } = require('@supabase/supabase-js')

console.log('üåê Teste Espec√≠fico do Frontend')
console.log('=' .repeat(50))

// Simular o ambiente do navegador
global.window = {
  location: {
    origin: 'https://repositoriodevagas.vercel.app'
  }
}

// Configura√ß√£o exata do frontend
const supabaseUrl = 'https://qdzrldxubcofobqmynab.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFkenJsZHh1YmNvZm9icW15bmFiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc3MzkyMjcsImV4cCI6MjA3MzMxNTIyN30.OGrgDawwnY9BXjwYpT36r1ESBHLHE2gf6FWZIYBsm3w'

console.log('üìã Configura√ß√£o:')
console.log('URL:', supabaseUrl)
console.log('Key:', supabaseKey ? 'Definida' : 'N√£o definida')
console.log('Origin:', global.window.location.origin)

// Criar cliente com configura√ß√£o exata do frontend
const supabase = createClient(
  supabaseUrl,
  supabaseKey,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
      // Configura√ß√µes espec√≠ficas para produ√ß√£o
      flowType: 'pkce'
    }
  }
)

// Testar diferentes cen√°rios
async function testScenarios() {
  console.log('\nüîç Testando Cen√°rios...')
  
  // Cen√°rio 1: Login b√°sico
  console.log('\n1Ô∏è‚É£ Login B√°sico...')
  try {
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: 'roberio.gomes@atento.com',
      password: 'admin123'
    })
    
    if (loginError) {
      console.error('‚ùå Erro no login:', loginError.message)
      console.error('üìã C√≥digo:', loginError.status)
      console.error('üìã Detalhes:', loginError)
      
      // Verificar se √© problema espec√≠fico do frontend
      if (loginError.message.includes('Invalid API key')) {
        console.log('\nüö® PROBLEMA ESPEC√çFICO: Invalid API key no frontend')
        console.log('üí° Poss√≠veis causas:')
        console.log('1. Problema de CORS')
        console.log('2. Configura√ß√£o de dom√≠nio no Supabase')
        console.log('3. Cache do navegador')
        console.log('4. Problema de rede')
        console.log('5. Configura√ß√£o de headers')
      }
    } else {
      console.log('‚úÖ Login OK')
      console.log('üÜî User ID:', loginData.user.id)
      
      // Fazer logout
      await supabase.auth.signOut()
    }
  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
  
  // Cen√°rio 2: Verificar se consegue acessar a API
  console.log('\n2Ô∏è‚É£ Verificando Acesso √† API...')
  try {
    const { data: { session }, error: sessionError } = await supabase.auth.getSession()
    
    if (sessionError) {
      console.error('‚ùå Erro na sess√£o:', sessionError.message)
    } else {
      console.log('‚úÖ Sess√£o OK')
    }
  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
  
  // Cen√°rio 3: Testar com diferentes configura√ß√µes
  console.log('\n3Ô∏è‚É£ Testando Configura√ß√µes Alternativas...')
  
  // Configura√ß√£o alternativa 1: Sem PKCE
  const supabaseAlt1 = createClient(supabaseUrl, supabaseKey, {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true
    }
  })
  
  try {
    const { data: loginData, error: loginError } = await supabaseAlt1.auth.signInWithPassword({
      email: 'roberio.gomes@atento.com',
      password: 'admin123'
    })
    
    if (loginError) {
      console.error('‚ùå Erro com configura√ß√£o alternativa:', loginError.message)
    } else {
      console.log('‚úÖ Configura√ß√£o alternativa OK')
      await supabaseAlt1.auth.signOut()
    }
  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

testScenarios()
